# -*- coding: utf-8 -*-

##############################################################################
#
#    Odoo Proprietary License v1.0
#
#    Copyright (c) 2013 LogicaSoft SPRL (<http://www.logicasoft.eu>).
#
#    This software and associated files (the "Software") may only be used (executed,
#    modified, executed after modifications) if you have purchased a valid license
#    from the authors, typically via Odoo Apps, or if you have received a written
#    agreement from the authors of the Software.
#
#    You may develop Odoo modules that use the Software as a library (typically
#    by depending on it, importing it and using its resources), but without copying
#    any source code or material from the Software. You may distribute those
#    modules under the license of your choice, provided that this license is
#    compatible with the terms of the Odoo Proprietary License (For example:
#    LGPL, MIT, or proprietary licenses similar to this one).
#
#    It is forbidden to publish, distribute, sublicense, or sell copies of the Software
#    or modified copies of the Software.
#
#    The above copyright notice and this permission notice must be included in all
#    copies or substantial portions of the Software.
#
#    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
#    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
#    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
#    DEALINGS IN THE SOFTWARE.
#
##############################################################################
from odoo import fields, models, api, _, exceptions


class LimsParameter(models.Model):
    _name = 'lims.parameter'
    _description = 'Parameter'
    _order = 'sequence, id'

    sequence = fields.Integer('Sequence', default=10)
    active = fields.Boolean('Active', default=True)
    ref = fields.Char('Reference', index=True)
    name = fields.Char('Name', required=True, translate=True, index=True)
    note = fields.Text('Note')
    product_id = fields.Many2one('product.product', 'Product', index=True)
    type_id = fields.Many2one('lims.parameter.type', 'Type', index=True)
    parent_id = fields.Many2one('lims.parameter', 'Parent')
    format = fields.Selection(selection='get_selection_format', string='Format', required=True)
    description_1 = fields.Char('Description 1')
    description_2 = fields.Char('Description 2')
    result_value_ids = fields.Many2many('lims.result.value', 'rel_parameter_value', 'parameter_id', 'value_id',
                                        "Result Value")
    method_param_charac_ids = fields.One2many('lims.method.parameter.characteristic', 'parameter_id',
                                              'Parameter Characteristics')
    # Only useful when lims_report is not installed.
    is_default_print_on_report = fields.Boolean('By default print result', default=True,
                                                help="For each result line generated by this parameter copy this "
                                                     "'Print Result' configuration.")

    def get_selection_format(self):
        return [('nu', _('NU (Numeric)')),
                ('se', _('SE (Select)')),
                ('ca', _('CA (Compute)')),
                ('tx', _('TX (Text)'))]

    @api.constrains('result_value_ids')
    def unique_result_value_ids(self):
        for record in self:
            if len(record.result_value_ids) != len(set(record.result_value_ids.mapped('name'))):
                raise exceptions.ValidationError(_("Result values must have differents names"))

    def write(self, vals):
        if vals.get('format'):
            results_exist = self.method_param_charac_ids.check_result_exist()
            if vals.get('format') != self.format and results_exist:
                raise exceptions.ValidationError(
                    _("You can't change the format of a parameter with results : {}").format(
                        vals.get('name') or self.name))
        return super().write(vals)

    def open_result_values(self):
        """
        Open the results value linked with this parameter
        :return:
        """
        self.ensure_one()
        return {
            'name': _('Result Value'),
            'type': 'ir.actions.act_window',
            'res_model': 'lims.result.value',
            'view_type': 'form',
            'view_mode': 'tree,form',
            'target': 'current',
            'context': {'default_parameter_ids': [(6, 0, [self.id])]},
            'domain': [('id', 'in', self.result_value_ids.ids)],
        }
